name: Docker Build (Simple)

on:
  push:
    tags:
      - 'v*'
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=latest" >> $GITHUB_OUTPUT
        fi

    - name: Set lowercase image name
      id: image_name
      run: |
        echo "IMAGE_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        
        # Pull and test the image
        docker pull ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
        
        # Test container starts
        container_id=$(docker run -d -p 8080:8080 ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }})
        
        # Wait for container to be ready
        sleep 5
        
        # Check if container is running
        if docker ps | grep -q $container_id; then
          echo "‚úÖ Container started successfully"
          
          # Test health endpoint
          if curl -f http://localhost:8080/health 2>/dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ö†Ô∏è  Health check failed or endpoint not available"
          fi
        else
          echo "‚ùå Container failed to start"
          docker logs $container_id
          exit 1
        fi
        
        # Cleanup
        docker stop $container_id
        docker rm $container_id
        
        echo "üéâ Docker image test completed successfully"

    - name: Show image info
      run: |
        echo "üì¶ Docker image built successfully!"
        echo "Image: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}"
        echo "Latest: ${{ env.REGISTRY }}/${{ steps.image_name.outputs.IMAGE_NAME }}:latest"
        
        if [[ "${{ steps.version.outputs.VERSION }}" != "latest" ]]; then
          echo "Tag: ${{ steps.version.outputs.VERSION }}"
        fi
