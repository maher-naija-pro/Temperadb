name: release-builds

on:
  push:
    tags:
      - 'v*'
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false
        default: 'v0.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GOPROXY: https://proxy.golang.org,direct
  GOSUMDB: sum.golang.org

permissions:
  contents: write
  security-events: write
  actions: read
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24.5'
        cache: true

    - name: Verify Go module
      run: |
        if [ ! -f go.mod ]; then
          echo "ERROR: go.mod not found"
          exit 1
        fi
        
        go mod download
        go mod verify

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=v0.0.0-$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi

    - name: Build Go binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "Building for ${{ matrix.os }}/${{ matrix.arch }}..."
        
        # Build binary
        go build -ldflags="-s -w -X main.Version=${{ steps.version.outputs.VERSION }}" \
                 -o "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}" .
        
        # Verify binary was created
        if [ ! -f "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}" ]; then
          echo "ERROR: Binary was not created"
          exit 1
        fi
        
        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.zip" "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.exe"
        else
          tar -czf "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}
          timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build.outputs.VERSION }}
        files: |
          artifacts/**/timeseriesdb-*.tar.gz
          artifacts/**/timeseriesdb-*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-binaries:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux AMD64 artifact
      uses: actions/download-artifact@v4
      with:
        name: timeseriesdb-linux-amd64
        path: ./bin

    - name: Test binary
      run: |
        chmod +x ./bin/timeseriesdb-linux-amd64
        
        # Test basic functionality
        echo "Testing binary..."
        timeout 10s ./bin/timeseriesdb-linux-amd64 --help 2>&1 || echo "Help command completed"
        timeout 10s ./bin/timeseriesdb-linux-amd64 --version 2>&1 || echo "Version command completed"
        
        echo "Binary test completed successfully"


