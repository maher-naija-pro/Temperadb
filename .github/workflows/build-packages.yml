name: Build and Publish Packages

on:
  push:
    tags:
      - 'v*'
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false
        default: 'v0.0.0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build for multiple platforms
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
            docker_platform: linux/amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
            docker_platform: linux/arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            docker_platform: windows/amd64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
            docker_platform: linux/amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
            docker_platform: linux/arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Determine version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=v0.0.0-$(date +%Y%m%d)-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        fi

    - name: Build Go binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        echo "Building for ${{ matrix.os }}/${{ matrix.arch }}..."
        go build -ldflags="-s -w -X main.Version=${{ steps.version.outputs.VERSION }}" \
                 -o "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}" \
                 -a -installsuffix cgo .
        
        # Create archive
        if [ "${{ matrix.os }}" = "windows" ]; then
          zip "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.zip" "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.exe"
        else
          tar -czf "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.tar.gz" "timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}"
        fi

    - name: Upload Go binary artifacts
      uses: actions/upload-artifact@v4
      with:
        name: timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}
          timeseriesdb-${{ matrix.os }}-${{ matrix.arch }}.*

    - name: Build Docker image
      if: matrix.os == 'linux'
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: ${{ matrix.docker_platform }}
        push: false
        load: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}-${{ matrix.arch }}
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}
          GOOS=${{ matrix.goos }}
          GOARCH=${{ matrix.goarch }}

  # Create release with all artifacts
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/**/timeseriesdb-*.tar.gz
          artifacts/**/timeseriesdb-*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish Docker images to GitHub Container Registry
  publish-docker:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && github.repository != 'outscale/tsdb'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Determine version
      id: version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Build and push multi-platform Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          VERSION=${{ steps.version.outputs.VERSION }}

  # Test the built binaries
  test-binaries:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Linux AMD64 artifact
      uses: actions/download-artifact@v4
      with:
        name: timeseriesdb-linux-amd64
        path: ./bin

    - name: Make binary executable
      run: chmod +x ./bin/timeseriesdb-linux-amd64

    - name: Test binary
      run: |
        echo "Testing binary..."
        ./bin/timeseriesdb-linux-amd64 --help || true
        echo "Binary test completed"

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
